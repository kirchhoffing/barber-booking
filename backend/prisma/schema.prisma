// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  BARBER
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model User {
  id          String        @id @default(cuid())
  email       String        @unique
  password    String
  name        String
  phone       String?
  role        Role         @default(USER)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  barber      Barber?      // Eğer kullanıcı berber ise
  appointments Appointment[]

  @@map("users")
}

model Barber {
  id            String        @id @default(cuid())
  userId        String       @unique
  user          User         @relation(fields: [userId], references: [id])
  name          String
  email         String       @unique
  phone         String?
  services      Service[]
  workingHours  WorkingHours[]
  timeSlots     TimeSlot[]
  appointments  Appointment[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("barbers")
}

model Service {
  id          String        @id @default(cuid())
  name        String
  duration    Int          // Dakika cinsinden
  price       Float
  description String?
  barberId    String
  barber      Barber       @relation(fields: [barberId], references: [id])
  appointments Appointment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("services")
}

model WorkingHours {
  id        String      @id @default(cuid())
  dayOfWeek Day      
  startTime String   
  endTime   String   
  isOpen    Boolean  @default(true)
  slotStatus Json    @default("{}") // Store slot statuses as JSON
  barberId  String
  barber    Barber   @relation(fields: [barberId], references: [id])
  timeSlots TimeSlot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("working_hours")
}

model Appointment {
  id        String      @id @default(cuid())
  date      DateTime
  status    String   @default("PENDING") // PENDING, CONFIRMED, CANCELLED, COMPLETED
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  barberId  String
  barber    Barber   @relation(fields: [barberId], references: [id])
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum TimeSlotStatus {
  EMPTY
  FULL
  CLOSED
}

model TimeSlot {
  id            String        @id @default(cuid())
  date          DateTime
  status        TimeSlotStatus @default(EMPTY)
  barberId      String
  barber        Barber        @relation(fields: [barberId], references: [id])
  workingHourId String
  workingHour   WorkingHours  @relation(fields: [workingHourId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("time_slots")
}
